function calculateInOutTimesForSheet() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Sheet1");
  const dataRange = sheet.getDataRange();
  const data = dataRange.getValues();

  for (let i = 1; i < data.length; i++) {
    let totalInTime = 0;
    let totalOutTime = 0;
    let firstTimestamp = null;
    // const dayDate = new Date(data[i][0]);  
    const dayDate = data[i][0];
    // console.log(dayDate)
    for (let j = 4; j < data[i].length; j += 2) {
      const inTime = data[i][j];
      let outTime = data[i][j + 1];

      // Get the current date and time if outTime is missing
      const currentDate = new Date();
      const currentTime = currentDate.toLocaleTimeString('en-US', { hour12: false });

      const year = dayDate.getFullYear();
      const month = String(dayDate.getMonth() + 1).padStart(2, '0');
      const day = String(dayDate.getDate()).padStart(2, '0');
      const formattedDate = `${year}-${month}-${day}`;

      if (!outTime) {
        outTime = new Date(`${formattedDate}T${currentTime}`);
      }

      if (inTime && outTime) {
        const inDateTime = parseTime(dayDate, inTime);
        const outDateTime = parseTime(dayDate, outTime);

        // Store the first in-time for escape calculation
        if (!firstTimestamp) {
          firstTimestamp = inDateTime;
        }
        // console.log(firstTimestamp)
        // Calculate the in-time duration
        const inDuration = outDateTime - inDateTime;
        totalInTime += inDuration;

        // Calculate out-time duration if there's a next in-time
        const nextInTime = j + 2 < data[i].length ? data[i][j + 2] : null;
        if (nextInTime) {
          const nextInDateTime = parseTime(dayDate, nextInTime);
          const outDuration = nextInDateTime - outDateTime;
          totalOutTime += outDuration;
        }
      }
    }

    // Update Total In Time and Total Out Time on the sheet
    sheet.getRange(i + 1, 2).setValue(formatDuration(totalInTime));  // Column B
    sheet.getRange(i + 1, 3).setValue(formatDuration(totalOutTime)); // Column C

    // Calculate and format estimated escape time
    if (firstTimestamp) {
      const eightAndHalfHoursInMs = 8.5 * 60 * 60 * 1000; // 8 hours 30 minutes
      const estimatedOutTime = new Date(firstTimestamp.getTime() + totalInTime + eightAndHalfHoursInMs);

      // Format estimated out time in 12-hour format with AM/PM
      let escapeHour = estimatedOutTime.getHours();
      const escapeMinute = estimatedOutTime.getMinutes();
      const period = escapeHour >= 12 ? 'PM' : 'AM';
      escapeHour = escapeHour % 12 || 12;  // Convert hour to 12-hour format

      const escapeTimeFormatted = `${escapeHour}:${String(escapeMinute).padStart(2, '0')} ${period}`;
      sheet.getRange(i + 1, 4).setValue(escapeTimeFormatted);  // Column D
    }
  }
}

// Helper function to parse a date and time into a Date object
function parseTime(date, time) {
  if (time instanceof Date) {
    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes());
  } else {
    const [hours, minutes] = time.split(':').map(Number);
    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), hours, minutes);
  }
}

// Helper function to format duration in hours and minutes
function formatDuration(duration) {
  const hours = Math.floor(duration / (1000 * 60 * 60));
  const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
  return `${hours}h ${minutes}m`;
}
