function calculateInOutTimesForSheet() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Sheet1"); // Replace with your sheet name
  const dataRange = sheet.getDataRange();
  const data = dataRange.getValues();

  for (let i = 1; i < data.length; i++) {
    let totalInTime = 0;
    let totalOutTime = 0;
    let firstTimestamp = null;

    // Loop through each pair of In and Out columns
    for (let j = 4; j < data[i].length; j += 2) {
      const inTime = data[i][j];
      const outTime = data[i][j + 1];

      // Only calculate if both In and Out times are present
      if (inTime && outTime) {
        const inDateTime = parseTime(inTime);
        const outDateTime = parseTime(outTime);

        // Store the first in time for escape calculation
        if (!firstTimestamp) {
          firstTimestamp = inDateTime;
        }

        // Calculate duration in milliseconds for In Time
        const inDuration = outDateTime - inDateTime;
        totalInTime += inDuration;

        // If there's another In time after this Out, calculate Out Time duration
        const nextInTime = j + 2 < data[i].length ? data[i][j + 2] : null;
        if (nextInTime) {
          const nextInDateTime = parseTime(nextInTime);
          const outDuration = nextInDateTime - outDateTime;
          totalOutTime += outDuration;
        }
      }
    }

    // Update sheet with calculated Total In Time and Total Out Time
    sheet.getRange(i + 1, 2).setValue(formatDuration(totalInTime)); // Column B
    sheet.getRange(i + 1, 3).setValue(formatDuration(totalOutTime)); // Column C

    // Calculate estimated escape time
    if (firstTimestamp) {
      const estimatedOutTime = new Date(firstTimestamp.getTime() + totalInTime + 30600000); // Adding 8h 30m to first in time + total in time
      let escapeHour = estimatedOutTime.getUTCHours();
      const escapeMinute = estimatedOutTime.getUTCMinutes();
      
      // Convert to 12-hour format
      const period = escapeHour >= 12 ? 'PM' : 'AM';
      escapeHour = escapeHour % 12 || 12; // Convert 0 to 12 for 12 AM

      const escapeTimeFormatted = `${escapeHour}:${String(escapeMinute).padStart(2, '0')} ${period}`;

      // Update the escape time in the next column (Column D)
      sheet.getRange(i + 1, 4).setValue(escapeTimeFormatted); // Column D
    }
  }
}

// Parse a date-time or time to extract hours and minutes
function parseTime(time) {
  if (time instanceof Date) {
    // If it's already a date object, use it directly
    return time;
  } else {
    // If it's a time string, parse hours and minutes
    const [hours, minutes] = time.split(':').map(Number);
    return new Date(1899, 11, 30, hours, minutes); // Use consistent date
  }
}

// Format duration in hours and minutes
function formatDuration(duration) {
  const hours = Math.floor(duration / (1000 * 60 * 60));
  const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
  return `${hours}h ${minutes}m`;
}
